{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue255;\red19\green118\blue70;\red144\green1\blue18;}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c3529\c52549\c34510;\cssrgb\c63922\c8235\c8235;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 //2352. Equal Row and Column Pairs\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf0 \strokec4  Solution \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf5 \strokec5 public\cf0 \strokec4  \cf5 \strokec5 int\cf0 \strokec4  equalPairs(\cf5 \strokec5 int\cf0 \strokec4 [][] grid) \{\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 HashMap<String,Integer>\cf0 \strokec4  rows = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 HashMap<>\cf0 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 StringBuilder\cf0 \strokec4  str = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 StringBuilder\cf0 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  ans = \cf6 \strokec6 0\cf0 \strokec4 ;\cb1 \
\
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  i=\cf6 \strokec6 0\cf0 \strokec4 ; i < grid.length; i++)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  j=\cf6 \strokec6 0\cf0 \strokec4 ; j < grid[\cf6 \strokec6 0\cf0 \strokec4 ].length; j++)\cb1 \
\cb3             \{\cb1 \
\cb3                 str.append(grid[i][j]);\cb1 \
\cb3                 str.append(\cf7 \strokec7 ','\cf0 \strokec4 );\cb1 \
\cb3             \}\cb1 \
\
\cb3             rows.put(str.toString(),rows.getOrDefault(str.toString(),\cf6 \strokec6 0\cf0 \strokec4 )\cf6 \strokec6 +1\cf0 \strokec4 );\cb1 \
\cb3             str = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 StringBuilder\cf0 \strokec4 ();\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf5 \strokec5 System\cf0 \strokec4 .out.println(rows);\cb1 \
\
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  i=\cf6 \strokec6 0\cf0 \strokec4 ; i < grid.length; i++)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  j=\cf6 \strokec6 0\cf0 \strokec4 ; j < grid[\cf6 \strokec6 0\cf0 \strokec4 ].length; j++)\cb1 \
\cb3             \{\cb1 \
\cb3                 str.append(grid[j][i]);\cb1 \
\cb3                 str.append(\cf7 \strokec7 ','\cf0 \strokec4 );\cb1 \
\cb3             \}\cb1 \
\cb3             \cf5 \strokec5 System\cf0 \strokec4 .out.println(str.toString());\cb1 \
\
\cb3             \cf5 \strokec5 if\cf0 \strokec4 (rows.containsKey(str.toString()))\cb1 \
\cb3             \{\cb1 \
\cb3                 ans= ans + rows.get(str.toString());\cb1 \
\cb3             \}\cb1 \
\cb3             str = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 StringBuilder\cf0 \strokec4 ();\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf5 \strokec5 return\cf0 \strokec4  ans;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 //1657. Determine if Two Strings Are Close\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf0 \strokec4  Solution \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf5 \strokec5 public\cf0 \strokec4  \cf5 \strokec5 boolean\cf0 \strokec4  closeStrings(\cf5 \strokec5 String\cf0 \strokec4  word1, \cf5 \strokec5 String\cf0 \strokec4  word2) \{\cb1 \
\
\cb3         \cf2 \strokec2 //Intuition - To check if all characters are present \cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 // frequencies sorted set values should match\cf0 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 int\cf0 \strokec4  freq1[]=\cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 int\cf0 \strokec4  [\cf6 \strokec6 26\cf0 \strokec4 ];\cb1 \
\cb3         \cf5 \strokec5 int\cf0 \strokec4  freq2[]=\cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 int\cf0 \strokec4  [\cf6 \strokec6 26\cf0 \strokec4 ];\cb1 \
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  i=\cf6 \strokec6 0\cf0 \strokec4 ;i<word1.length();i++)\{\cb1 \
\cb3             freq1[word1.charAt(i)-\cf7 \strokec7 'a'\cf0 \strokec4 ]++;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  i=\cf6 \strokec6 0\cf0 \strokec4 ;i<word2.length();i++)\{\cb1 \
\cb3             freq2[word2.charAt(i)-\cf7 \strokec7 'a'\cf0 \strokec4 ]++;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  i=\cf6 \strokec6 0\cf0 \strokec4 ;i<\cf6 \strokec6 26\cf0 \strokec4 ;i++)\{\cb1 \
\cb3             \cf5 \strokec5 if\cf0 \strokec4 ((freq1[i]==\cf6 \strokec6 0\cf0 \strokec4 &&freq2[i]!=\cf6 \strokec6 0\cf0 \strokec4 )||(freq1[i]!=\cf6 \strokec6 0\cf0 \strokec4 &&freq2[i]==\cf6 \strokec6 0\cf0 \strokec4 ))\cf5 \strokec5 return\cf0 \strokec4  \cf5 \strokec5 false\cf0 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf5 \strokec5 Arrays\cf0 \strokec4 .sort(freq1);\cf5 \strokec5 Arrays\cf0 \strokec4 .sort(freq2);\cb1 \
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  i=\cf6 \strokec6 0\cf0 \strokec4 ;i<\cf6 \strokec6 26\cf0 \strokec4 ;i++)\{\cb1 \
\cb3             \cf5 \strokec5 if\cf0 \strokec4 (freq1[i]!=freq2[i])\cf5 \strokec5 return\cf0 \strokec4  \cf5 \strokec5 false\cf0 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf5 \strokec5 return\cf0 \strokec4  \cf5 \strokec5 true\cf0 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 //1207. Unique Number of Occurrences\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf0 \strokec4  Solution \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf5 \strokec5 public\cf0 \strokec4  \cf5 \strokec5 boolean\cf0 \strokec4  uniqueOccurrences(\cf5 \strokec5 int\cf0 \strokec4 [] arr) \{\cb1 \
\
\cb3         \cf5 \strokec5 HashMap<Integer,Integer>\cf0 \strokec4  count = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 HashMap<>\cf0 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 Integer\cf0 \strokec4  i : arr)\cb1 \
\cb3         \{\cb1 \
\cb3             count.put(i, count.getOrDefault(i,\cf6 \strokec6 0\cf0 \strokec4 )\cf6 \strokec6 +1\cf0 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 HashSet<Integer>\cf0 \strokec4  unique = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 HashSet<>\cf0 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 Integer\cf0 \strokec4  i : count.keySet())\cb1 \
\cb3         \{\cb1 \
\cb3             \cf5 \strokec5 if\cf0 \strokec4 (unique.contains(count.get(i)))\cb1 \
\cb3             \{\cb1 \
\cb3                 \cf5 \strokec5 return\cf0 \strokec4  \cf5 \strokec5 false\cf0 \strokec4 ;\cb1 \
\cb3             \}\cb1 \
\cb3             \cf5 \strokec5 else\cf0 \strokec4 \{\cb1 \
\cb3                 unique.add(count.get(i));\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf5 \strokec5 return\cf0 \strokec4  \cf5 \strokec5 true\cf0 \strokec4 ;\cb1 \
\cb3         \cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 //2215. Find the Difference of Two Arrays\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf0 \strokec4  Solution \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf5 \strokec5 public\cf0 \strokec4  \cf5 \strokec5 List<List<Integer>>\cf0 \strokec4  findDifference(\cf5 \strokec5 int\cf0 \strokec4 [] nums1, \cf5 \strokec5 int\cf0 \strokec4 [] nums2) \{\cb1 \
\
\cb3         \cf5 \strokec5 List<List<Integer>>\cf0 \strokec4  ans = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 ArrayList<>\cf0 \strokec4 ();\cb1 \
\
\cb3         \cf5 \strokec5 HashSet<Integer>\cf0 \strokec4  setNums2 = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 HashSet<>\cf0 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 Integer\cf0 \strokec4  i : nums2)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf5 \strokec5 if\cf0 \strokec4 (!setNums2.contains(i))\cb1 \
\cb3             \{\cb1 \
\cb3                 setNums2.add(i);\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf2 \strokec2 //create hashmap for array 1\cf0 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 HashSet<Integer>\cf0 \strokec4  setNums1 = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 HashSet<>\cf0 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 ArrayList<Integer>\cf0 \strokec4  l1 = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 ArrayList<>\cf0 \strokec4 ();\cb1 \
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 Integer\cf0 \strokec4  i : nums1)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf5 \strokec5 if\cf0 \strokec4 (!setNums1.contains(i))\cb1 \
\cb3             \{\cb1 \
\cb3                 setNums1.add(i);\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\
\cb3        \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 Integer\cf0 \strokec4  i : setNums1)\cb1 \
\cb3        \{\cb1 \
\cb3            \cf5 \strokec5 if\cf0 \strokec4 (!setNums2.contains(i))\cb1 \
\cb3            \{\cb1 \
\cb3                l1.add(i);\cb1 \
\cb3            \}\cb1 \
\cb3        \}\cb1 \
\cb3        ans.add(l1);\cb1 \
\
\cb3         \cf2 \strokec2 //create hashmap for array 2\cf0 \cb1 \strokec4 \
\cb3         l1 = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 ArrayList<>\cf0 \strokec4 ();\cb1 \
\cb3        \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 Integer\cf0 \strokec4  i : setNums2)\cb1 \
\cb3        \{\cb1 \
\cb3            \cf5 \strokec5 if\cf0 \strokec4 (!setNums1.contains(i))\cb1 \
\cb3            \{\cb1 \
\cb3                l1.add(i);\cb1 \
\cb3            \}\cb1 \
\cb3        \}\cb1 \
\cb3        ans.add(l1);\cb1 \
\
\cb3         \cf5 \strokec5 return\cf0 \strokec4  ans;\cb1 \
\cb3         \cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 //2390. Removing Stars From a String\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf0 \strokec4  Solution \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf5 \strokec5 public\cf0 \strokec4  \cf5 \strokec5 String\cf0 \strokec4  removeStars(\cf5 \strokec5 String\cf0 \strokec4  s) \{\cb1 \
\
\cb3         \cf5 \strokec5 Stack<Character>\cf0 \strokec4  st = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 Stack<>\cf0 \strokec4 ();\cb1 \
\
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 Character\cf0 \strokec4  x : s.toCharArray())\cb1 \
\cb3         \{\cb1 \
\cb3             \cf5 \strokec5 if\cf0 \strokec4 (x == \cf7 \strokec7 '*'\cf0 \strokec4 )\cb1 \
\cb3             \{\cb1 \
\cb3                 st.pop();\cb1 \
\cb3             \}\cb1 \
\cb3             \cf5 \strokec5 else\cf0 \strokec4 \{\cb1 \
\cb3                 st.push(x);\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf5 \strokec5 char\cf0 \strokec4 [] ans = \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 char\cf0 \strokec4 [st.size()];\cb1 \
\cb3         \cf5 \strokec5 for\cf0 \strokec4 (\cf5 \strokec5 int\cf0 \strokec4  i = st.size()\cf6 \strokec6 -1\cf0 \strokec4 ;i>=\cf6 \strokec6 0\cf0 \strokec4 ;i--)\cb1 \
\cb3         \{   \cb1 \
\cb3             ans[i] = st.pop();\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf5 \strokec5 return\cf0 \strokec4  \cf5 \strokec5 new\cf0 \strokec4  \cf5 \strokec5 String\cf0 \strokec4 (ans);       \cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 //\cf0 \cb1 \strokec4 \
}